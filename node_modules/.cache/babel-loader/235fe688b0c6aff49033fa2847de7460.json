{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\IdeaProjects\\\\GermGang-BacterialID\\\\src\\\\Components\\\\Header.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PersonTracker from \"./PersonTracker\";\nimport { useContext } from \"react\"; //you can make this dynamic and turn into something based on some outside factors. Ex: If I move past the first screen (more than one is the array), change the header to include the reset/logout\n//reset button\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = props => {\n  _s();\n\n  //button/node objects from the context that are being updated\n  const {\n    buttonNameArray,\n    updateArray\n  } = useContext(PersonTracker); //this is the information needed. The array of buttons names and the update array function\n\n  function goBack() {\n    if (buttonNameArray.length > 1) {\n      //create a copy\n      let newArray = [...buttonNameArray]; //remove the last thing from the copy\n\n      newArray.pop(); //update the global array with the copy\n\n      updateArray(newArray); //test to make sure it fires\n\n      console.log(\"sliced\");\n    }\n  }\n\n  function reset() {\n    if (buttonNameArray.length > 1) {\n      //create a copy\n      let newArray = [...buttonNameArray]; //remove the last thing from the copy\n\n      newArray.splice(1); //update the global array with the copy\n\n      updateArray(newArray); //test to make sure it fires\n\n      console.log(\"sliced and reset\");\n    }\n  } //use the getname function here to get a germ object.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        goBack();\n      },\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Header, \"JKf2SiZKBzlOg0TT+5vca5SjVsY=\");\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["C:/Users/rober/IdeaProjects/GermGang-BacterialID/src/Components/Header.js"],"names":["React","PersonTracker","useContext","Header","props","buttonNameArray","updateArray","goBack","length","newArray","pop","console","log","reset","splice"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAAQC,UAAR,QAAyB,OAAzB,C,CACA;AASA;;;;AAKA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AAEtB;AACA,QAAM;AAACC,IAAAA,eAAD;AAAkBC,IAAAA;AAAlB,MAAiCJ,UAAU,CAACD,aAAD,CAAjD,CAHsB,CAG4C;;AAElE,WAASM,MAAT,GAAkB;AAEd,QAAGF,eAAe,CAACG,MAAhB,GAAyB,CAA5B,EAA+B;AAE3B;AACA,UAAIC,QAAQ,GAAG,CAAC,GAAGJ,eAAJ,CAAf,CAH2B,CAK3B;;AACAI,MAAAA,QAAQ,CAACC,GAAT,GAN2B,CAQ3B;;AACAJ,MAAAA,WAAW,CAACG,QAAD,CAAX,CAT2B,CAW3B;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AAEJ;;AAED,WAASC,KAAT,GAAiB;AAEb,QAAGR,eAAe,CAACG,MAAhB,GAAyB,CAA5B,EAA+B;AAE3B;AACA,UAAIC,QAAQ,GAAG,CAAC,GAAGJ,eAAJ,CAAf,CAH2B,CAK3B;;AACAI,MAAAA,QAAQ,CAACK,MAAT,CAAgB,CAAhB,EAN2B,CAQ3B;;AACAR,MAAAA,WAAW,CAACG,QAAD,CAAX,CAT2B,CAW3B;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH;AAEJ,GAzCqB,CA2CtB;;;AAEA,sBAAO;AAAA,2BACC;AAAQ,MAAA,OAAO,EAAE,MAAK;AAElBL,QAAAA,MAAM;AAET,OAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UAAP;AASH,CAtDD;;GAAMJ,M;;KAAAA,M;AAwDN,eAAeA,MAAf","sourcesContent":["import React from 'react'\r\nimport PersonTracker from \"./PersonTracker\";\r\nimport {useContext} from \"react\";\r\n//you can make this dynamic and turn into something based on some outside factors. Ex: If I move past the first screen (more than one is the array), change the header to include the reset/logout\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//reset button\r\n\r\n\r\n\r\n\r\nconst Header = (props) => {\r\n\r\n    //button/node objects from the context that are being updated\r\n    const {buttonNameArray, updateArray} = useContext(PersonTracker)  //this is the information needed. The array of buttons names and the update array function\r\n\r\n    function goBack() {\r\n\r\n        if(buttonNameArray.length > 1) {\r\n\r\n            //create a copy\r\n            let newArray = [...buttonNameArray]\r\n\r\n            //remove the last thing from the copy\r\n            newArray.pop()\r\n\r\n            //update the global array with the copy\r\n            updateArray(newArray)\r\n\r\n            //test to make sure it fires\r\n            console.log(\"sliced\")\r\n        }\r\n\r\n    }\r\n\r\n    function reset() {\r\n\r\n        if(buttonNameArray.length > 1) {\r\n\r\n            //create a copy\r\n            let newArray = [...buttonNameArray]\r\n\r\n            //remove the last thing from the copy\r\n            newArray.splice(1)\r\n\r\n            //update the global array with the copy\r\n            updateArray(newArray)\r\n\r\n            //test to make sure it fires\r\n            console.log(\"sliced and reset\")\r\n        }\r\n\r\n    }\r\n\r\n    //use the getname function here to get a germ object.\r\n\r\n    return <div>\r\n            <button onClick={()=> {\r\n\r\n                goBack();\r\n\r\n            }}>Back</button>\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Header"]},"metadata":{},"sourceType":"module"}