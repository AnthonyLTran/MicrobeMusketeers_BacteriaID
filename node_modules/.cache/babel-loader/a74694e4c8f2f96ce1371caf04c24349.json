{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\IdeaProjects\\\\GermGang-BacterialID\\\\src\\\\Components\\\\Header.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PersonTracker from \"./PersonTracker\";\nimport { useContext } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Alert, Breadcrumb, Navbar, Nav, NavDropdown } from 'react-bootstrap'; //you can make this dynamic and turn into something based on some outside factors. Ex: If I move past the first screen (more than one is the array), change the header to include the reset/logout\n//reset button\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = props => {\n  _s();\n\n  //button/node objects from the context that are being updated\n  const {\n    buttonNameArray,\n    updateArray\n  } = useContext(PersonTracker); //this is the information needed. The array of buttons names and the update array function\n\n  function goBack() {\n    if (buttonNameArray.length > 1) {\n      //create a copy\n      let newArray = [...buttonNameArray]; //remove the last thing from the copy\n\n      newArray.pop(); //update the global array with the copy\n\n      updateArray(newArray); //test to make sure it fires\n\n      console.log(\"sliced\");\n    }\n  }\n\n  function reset() {\n    if (buttonNameArray.length > 1) {\n      //create a copy\n      let newArray = [...buttonNameArray]; //remove the last thing from the copy\n\n      newArray.splice(1); //update the global array with the copy\n\n      updateArray(newArray); //test to make sure it fires\n\n      console.log(\"sliced and reset\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      collapseOnSelect: true,\n      expand: \"lg\",\n      bg: \"dark\",\n      variant: \"dark\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n        href: \"#home\",\n        children: \"React-Bootstrap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar.Toggle, {\n        \"aria-controls\": \"responsive-navbar-nav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Navbar.Collapse, {\n        id: \"responsive-navbar-nav\",\n        children: [/*#__PURE__*/_jsxDEV(Nav, {\n          className: \"mr-auto\",\n          children: [/*#__PURE__*/_jsxDEV(Nav.Link, {\n            href: \"#features\",\n            children: \"Features\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Nav.Link, {\n            href: \"#pricing\",\n            children: \"Pricing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NavDropdown, {\n            title: \"Dropdown\",\n            id: \"collasible-nav-dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              href: \"#action/3.1\",\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              href: \"#action/3.2\",\n              children: \"Another action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              href: \"#action/3.3\",\n              children: \"Something\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              href: \"#action/3.4\",\n              children: \"Separated link\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Nav, {\n          children: [/*#__PURE__*/_jsxDEV(Nav.Link, {\n            href: \"#deets\",\n            children: \"More deets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Nav.Link, {\n            eventKey: 2,\n            href: \"#memes\",\n            children: \"Dank memes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 13\n  }, this); //use the getname function here to get a germ object.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"secondary\",\n      onClick: () => {\n        goBack();\n      },\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Header, \"JKf2SiZKBzlOg0TT+5vca5SjVsY=\");\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["C:/Users/rober/IdeaProjects/GermGang-BacterialID/src/Components/Header.js"],"names":["React","PersonTracker","useContext","Button","Alert","Breadcrumb","Navbar","Nav","NavDropdown","Header","props","buttonNameArray","updateArray","goBack","length","newArray","pop","console","log","reset","splice"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PersonTracker from \"./PersonTracker\";\r\nimport {useContext} from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {Button, Alert, Breadcrumb, Navbar, Nav, NavDropdown} from 'react-bootstrap';\r\n//you can make this dynamic and turn into something based on some outside factors. Ex: If I move past the first screen (more than one is the array), change the header to include the reset/logout\r\n\r\n//reset button\r\n\r\n\r\nconst Header = (props) => {\r\n\r\n    //button/node objects from the context that are being updated\r\n    const {buttonNameArray, updateArray} = useContext(PersonTracker)  //this is the information needed. The array of buttons names and the update array function\r\n\r\n    function goBack() {\r\n\r\n        if(buttonNameArray.length > 1) {\r\n\r\n            //create a copy\r\n            let newArray = [...buttonNameArray]\r\n\r\n            //remove the last thing from the copy\r\n            newArray.pop()\r\n\r\n            //update the global array with the copy\r\n            updateArray(newArray)\r\n\r\n            //test to make sure it fires\r\n            console.log(\"sliced\")\r\n        }\r\n\r\n    }\r\n\r\n    function reset() {\r\n\r\n        if(buttonNameArray.length > 1) {\r\n\r\n            //create a copy\r\n            let newArray = [...buttonNameArray]\r\n\r\n            //remove the last thing from the copy\r\n            newArray.splice(1)\r\n\r\n            //update the global array with the copy\r\n            updateArray(newArray)\r\n\r\n            //test to make sure it fires\r\n            console.log(\"sliced and reset\")\r\n        }\r\n\r\n    }\r\n\r\n    return (<div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#features\">Features</Nav.Link>\r\n                        <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n                        <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Nav.Link href=\"#deets\">More deets</Nav.Link>\r\n                        <Nav.Link eventKey={2} href=\"#memes\">\r\n                            Dank memes\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n    \r\n    //use the getname function here to get a germ object.\r\n\r\n    return <div>\r\n            <Button variant=\"secondary\" onClick={()=> {\r\n\r\n                goBack();\r\n\r\n            }}>Back</Button>\r\n\r\n\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport default Header"]},"metadata":{},"sourceType":"module"}