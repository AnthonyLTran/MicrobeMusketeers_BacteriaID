[{"/Users/natesmac/IdeaProjects/germgang/src/index.js":"1","/Users/natesmac/IdeaProjects/germgang/src/reportWebVitals.js":"2","/Users/natesmac/IdeaProjects/germgang/src/App.js":"3","/Users/natesmac/IdeaProjects/germgang/src/Components/AdminLogin.js":"4","/Users/natesmac/IdeaProjects/germgang/src/Components/AddForm.js":"5","/Users/natesmac/IdeaProjects/germgang/src/Components/Dashboard.js":"6","/Users/natesmac/IdeaProjects/germgang/src/Components/PrivateRoute.js":"7","/Users/natesmac/IdeaProjects/germgang/src/Components/Header.js":"8","/Users/natesmac/IdeaProjects/germgang/src/Components/PersonTracker.js":"9","/Users/natesmac/IdeaProjects/germgang/src/Components/Login.js":"10","/Users/natesmac/IdeaProjects/germgang/src/firebase.js":"11","/Users/natesmac/IdeaProjects/germgang/src/Components/ForgotPassword.js":"12","/Users/natesmac/IdeaProjects/germgang/src/Components/UpdateProfile.js":"13","/Users/natesmac/IdeaProjects/germgang/src/Components/QuestionPage.js":"14","/Users/natesmac/IdeaProjects/germgang/src/contexts/AuthContext.js":"15","/Users/natesmac/IdeaProjects/germgang/src/Components/firebaseUtils.js":"16","/Users/natesmac/IdeaProjects/germgang/src/Components/DeleteForm.js":"17","/Users/natesmac/IdeaProjects/germgang/src/Components/UpdateForm.js":"18","/Users/natesmac/IdeaProjects/germgang/src/Components/FormHelper.js":"19","/Users/natesmac/IdeaProjects/germgang/src/Components/RoutingButtons.js":"20"},{"size":611,"mtime":1619434577322,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1614609024262,"results":"23","hashOfConfig":"22"},{"size":225865,"mtime":1619451192183,"results":"24","hashOfConfig":"22"},{"size":1569,"mtime":1619434577320,"results":"25","hashOfConfig":"22"},{"size":16083,"mtime":1619435640030,"results":"26","hashOfConfig":"22"},{"size":1472,"mtime":1619434577320,"results":"27","hashOfConfig":"22"},{"size":412,"mtime":1619434577320,"results":"28","hashOfConfig":"22"},{"size":4352,"mtime":1619434577320,"results":"29","hashOfConfig":"22"},{"size":403,"mtime":1616594593234,"results":"30","hashOfConfig":"22"},{"size":2016,"mtime":1619434577320,"results":"31","hashOfConfig":"22"},{"size":481,"mtime":1619434577321,"results":"32","hashOfConfig":"22"},{"size":1655,"mtime":1619434577320,"results":"33","hashOfConfig":"22"},{"size":2598,"mtime":1619434577321,"results":"34","hashOfConfig":"22"},{"size":2934,"mtime":1619443475108,"results":"35","hashOfConfig":"22"},{"size":1280,"mtime":1619434577321,"results":"36","hashOfConfig":"22"},{"size":5770,"mtime":1619451903768,"results":"37","hashOfConfig":"22"},{"size":6967,"mtime":1619439716703,"results":"38","hashOfConfig":"22"},{"size":8038,"mtime":1619448481462,"results":"39","hashOfConfig":"22"},{"size":9112,"mtime":1619434577320,"results":"40","hashOfConfig":"22"},{"size":1904,"mtime":1619439018578,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"1u3ytzv",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"45"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/natesmac/IdeaProjects/germgang/src/index.js",["89","90"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AdminLogin from \"./Components/AdminLogin\";\nimport AddForm from \"./Components/AddForm\";\n\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <AdminLogin />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["91","92"],"/Users/natesmac/IdeaProjects/germgang/src/reportWebVitals.js",[],"/Users/natesmac/IdeaProjects/germgang/src/App.js",["93","94"],"/Users/natesmac/IdeaProjects/germgang/src/Components/AdminLogin.js",["95","96"],"import React from \"react\"\nimport { AuthProvider } from \"../contexts/AuthContext\"\nimport PrivateRoute from \"./PrivateRoute\"\nimport Dashboard from \"./Dashboard.js\"\nimport Login from \"./Login\"\nimport ForgotPassword from \"./ForgotPassword\"\nimport UpdateProfile from \"./UpdateProfile\"\nimport { Container } from \"react-bootstrap\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport App from \"../App\"\nimport DeleteForm from \"./DeleteForm\";\nimport AddForm from \"./AddForm\";\nimport UpdateForm from \"./UpdateForm\";\n\nexport default function AdminLogin() {\n\n    async function handleSubmit(e) {\n        e.preventDefault()\n    }\n\n    return (\n            <div className=\"w-100\">\n                <Router>\n                    <AuthProvider>\n                        <Switch>\n                            <Route exact path = \"/\" component ={App}/>\n                            <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n                            <PrivateRoute path=\"/update-profile\" component={UpdateProfile} />\n                            <Route exact path=\"/login\" component={Login} />\n                            <Route path=\"/forgot-password\" component={ForgotPassword} />\n                            <Route path=\"/add-form\" component={AddForm} />\n                            <Route path=\"/delete-form\" component={DeleteForm} />\n                            <Route path=\"/update-form\" component={UpdateForm} />\n                        </Switch>\n                    </AuthProvider>\n                </Router>\n            </div>\n    )\n}\n","/Users/natesmac/IdeaProjects/germgang/src/Components/AddForm.js",["97"],"import React, {useState} from \"react\";\nimport {Formik, Field, Form, ErrorMessage, FieldArray} from 'formik';\nimport {DropdownHelper, FormHelper} from \"./FormHelper\"\nimport * as Yup from 'yup'\nimport {Add} from \"./firebaseUtils\";\n\nconst AddForm = () => {\n\n\n    const initialValues = {\n        location: \"\",\n        nodeGerms: [{\n            name: \"\",\n            image: \"\",\n            buttonList: []\n\n        }],\n\n    }\n\n    const SignUpSchema = Yup.object().shape({\n        location: Yup.string()\n            .matches(/.*\\d{4}\\s*$/gm, \"A location is required with a unique ID (4 numbers)\")\n            .required(\"Location is required, select from dropdown or type\"),\n\n        nodeGerms: Yup.array().of(\n            Yup.object().shape({\n                name: Yup.string()\n                    .matches(/.*\\d{4}\\s*$/gm, \"A name must have a unique ID (4 numbers)\")\n                    .trim(\"Can't be empty\")\n                    .required(\"A name is required\"),\n                image: Yup.string(),\n                buttonList: Yup.array().of(\n                    Yup.string()\n                        .matches(/.*\\d{4}\\s*$/gm, \"This name must have a unique ID (4 numbers)\")\n                        .trim()\n                ),\n            })\n        ),\n    });\n\n\n    //array of objects contained in the initial value object\n    return (\n        <div className=\"form-background\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"back-color top10 px-4 py-3 rounded\">\n\n\n                            <div className=\"row justify-content-bottom text-center\">\n                                <div className=\"col\">\n                                    <h1 className=\"top30\">Add Form</h1>\n                                </div>\n                            </div>\n\n\n                            <Formik\n                                initialValues={initialValues}\n                                validationSchema={SignUpSchema}\n                                validateOnBlur={true}\n                                onSubmit={(values) => {\n                                    console.log(values);\n                                    Add(values.nodeGerms, values.nodeGerms[0].name, values.location).then((r) => (alert('added something to firebase')))\n                                }}\n                            >\n\n                                {({values, errors, touched}) => (\n\n\n                                    <Form>\n                                        <div className=\"row\">\n                                            <div className=\"col\">\n                                                <div className=\"form-group\">\n                                                    <Field name=\"location\" id=\"location\" component={DropdownHelper}\n                                                           className=\"form-control\">\n                                                        <ErrorMessage name=\"location\" component=\"div\"\n                                                                      className=\"field-error\"/>\n                                                    </Field>\n                                                </div>\n                                            </div>\n                                        </div>\n\n\n                                        <FieldArray name=\"nodeGerms\">\n                                            {\n                                                ({remove, push}) => (\n\n                                                    <div className=\"row rounded\" style={{marginRight: '7px'}}>\n                                                        <div className=\"col\">\n                                                            {values.nodeGerms.map((nodes, index) => (\n                                                                    <div className=\"row\">\n                                                                        <div>\n                                                                            <button type='button'\n                                                                                    className='close'\n                                                                                    onClick={() => (remove(index))}>\n\n                                                                                                   <span\n                                                                                                       aria-hidden=\"true\">&times;\n                                                                                                   </span>\n\n                                                                            </button>\n\n\n                                                                        </div>\n\n                                                                        <div className=\"col border rounded\"\n                                                                             style={{backgroundColor: '#EDECEF'}}>\n\n\n                                                                            <div className=\"row \">\n                                                                                <div className=\"col\">\n\n\n                                                                                    <label\n                                                                                        htmlFor={`nodeGerms.${index}.name`}\n                                                                                        className=\"col-sm-2 col-form-label invisible \">Name</label>\n\n                                                                                    <Field\n                                                                                        name={`nodeGerms.${index}.name`}\n                                                                                        placeholder=\"Name - Ex: Streptococcus\"\n                                                                                        type=\"text\"\n                                                                                        className=\"form-control round-custom \"\n                                                                                    />\n                                                                                    <ErrorMessage\n                                                                                        name={`nodeGerms.${index}.name`}\n                                                                                        component=\"div\"\n                                                                                        className=\"field-error\"\n                                                                                    />\n\n                                                                                </div>\n\n\n                                                                                <div className=\"col\">\n                                                                                    <label\n                                                                                        htmlFor={`nodeGerms.${index}.image`}\n                                                                                        className=\"col-sm-2 col-form-label invisible\">Image</label>\n\n                                                                                    <Field\n                                                                                        name={`nodeGerms.${index}.image`}\n                                                                                        placeholder=\"\"\n                                                                                        type=\"file\"\n                                                                                        className=\"form-control-file rounded\"\n                                                                                    />\n                                                                                    <ErrorMessage\n                                                                                        name={`nodeGerms.${index}.image`}\n                                                                                        component=\"div\"\n                                                                                        className=\"field-error\"\n                                                                                    />\n\n                                                                                </div>\n                                                                            </div>\n\n                                                                            <div className=\"row border rounded top10\">\n                                                                                <div className=\"col\">\n                                                                                    <div\n                                                                                        className=\"row justify-content-md-center\">\n                                                                                        <div\n                                                                                            className=\"col-md-6 offset-md-3\">\n                                                                                            <span><label\n                                                                                                htmlFor={`nodeGerms.${index}.buttonList`}\n                                                                                                className=\"col-form-label invisible\">List of new Button Names</label></span>\n                                                                                        </div>\n                                                                                    </div>\n                                                                                    <FieldArray\n                                                                                        name={`nodeGerms[${index}].buttonList`}>\n\n\n                                                                                        {\n                                                                                            ({push, remove}) => (\n                                                                                                <div className=\"row\">\n                                                                                                    <div className=\"col\">\n\n                                                                                                        <Field\n                                                                                                            component={FormHelper}\n                                                                                                            name={`nodeGerms.${index}.buttonList`}\n                                                                                                            placeholder=\"List of attached buttons - Ex: Rods 1010, Clusters 2102\"\n                                                                                                            type=\"text\"\n                                                                                                            theArray={values.nodeGerms[index].buttonList}\n                                                                                                            theUpdater={remove}\n                                                                                                            theHandler={push}\n                                                                                                            index={index}\n                                                                                                            className=\"form-control\"\n\n                                                                                                        />\n\n                                                                                                        <ErrorMessage\n                                                                                                            name={`nodeGerms.${index}.buttonList`}\n                                                                                                            component=\"div\"\n                                                                                                            className=\"field-error\"\n\n                                                                                                        />\n\n                                                                                                    </div>\n\n                                                                                                </div>\n                                                                                            )\n                                                                                        }\n\n                                                                                    </FieldArray>\n                                                                                </div>\n                                                                            </div>\n\n\n                                                                        </div>\n\n                                                                    </div>\n\n\n                                                                )\n                                                            )}\n                                                            <div className=\"col addButton\">\n                                                                <button\n                                                                    type=\"button\"\n                                                                    className=\"secondary float-right btn1 btn1-primary\"\n                                                                    onClick={() => push({\n                                                                        name: '',\n                                                                        image: '',\n                                                                        buttonList: []\n                                                                    })}\n                                                                >\n                                                                    +\n                                                                </button>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n\n\n                                                )}\n                                        </FieldArray>\n\n                                        <div className=\"row\">\n                                            <div className=\"col\">\n                                                <div className=\"d-flex justify-content-center mt-4 mb-4\">\n                                                    <button type=\"submit\"\n                                                            className=\"btn1 btn1-primary btn-block font-weight-bold\"\n                                                            disabled={Formik.isSubmitting || Formik.errors}>\n                                                        Submit\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <hr/>\n                                    </Form>\n\n                                )\n\n                                }\n                            </Formik>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\n\n\nexport default AddForm\n","/Users/natesmac/IdeaProjects/germgang/src/Components/Dashboard.js",["98"],"import React, { useState } from \"react\"\nimport { Card, Button, Alert } from \"react-bootstrap\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { Container } from \"react-bootstrap\"\n\n\nexport default function Dashboard() {\n  const [error, setError] = useState(\"\")\n  const { currentUser, logout } = useAuth()\n  const history = useHistory()\n\n  async function handleLogout() {\n    setError(\"\")\n\n    try {\n      await logout()\n      history.push(\"/login\")\n    } catch {\n      setError(\"Failed to log out\")\n    }\n  }\n\n  return (\n    <>\n      <Card>\n\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Admin Controls</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <strong>Email:</strong> {currentUser.email}\n          <Link to=\"/update-profile\" className=\"btn btn-secondary w-100 mt-3\">\n            Update Profile\n          </Link>\n          <Link to=\"/add-form\" className=\"btn btn-secondary w-100 mt-3\">\n            Add Form\n          </Link>\n          <Link to=\"/update-form\" className=\"btn btn-secondary w-100 mt-3\">\n            Update Form\n          </Link>\n          <Link to=\"/delete-form\" className=\"btn btn-secondary w-100 mt-3\">\n            Delete Form\n          </Link>\n        </Card.Body>\n      </Card>\n      <div className=\"w-100 text-center mt-2\">\n        <Button variant=\"link\" onClick={handleLogout}>\n          Log Out\n        </Button>\n      </div>\n    </>\n  )\n}\n","/Users/natesmac/IdeaProjects/germgang/src/Components/PrivateRoute.js",[],"/Users/natesmac/IdeaProjects/germgang/src/Components/Header.js",["99","100","101","102","103","104","105","106","107","108"],"import React from 'react'\nimport PersonTracker from \"./PersonTracker\";\nimport {useContext} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Button, Alert, Breadcrumb, Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { BrowserRouter as Router, Switch, Route ,Link, NavLink} from \"react-router-dom\"\nimport Login from \"./Login\"\nimport {getName} from \"./firebaseUtils\";\nimport RoutingButton from \"./RoutingButtons\";\n//you can make this dynamic and turn into something based on some outside factors. Ex: If I move past the first screen (more than one is the array), change the header to include the reset/logout\n\n//reset button\n\n\nconst Header = (props) => {\n\n    //button/node objects from the context that are being updated\n    const {buttonNameArray, updateArray} = useContext(PersonTracker)  //this is the information needed. The array of buttons names and the update array function\n\n    function goBack() {\n\n        if (buttonNameArray.length > 1) {\n\n            //create a copy\n            let newArray = [...buttonNameArray]\n\n            //remove the last thing from the copy\n            newArray.pop()\n\n            //update the global array with the copy\n            updateArray(newArray)\n\n            //test to make sure it fires\n            console.log(\"sliced\")\n        }\n\n    }\n\n\n    function reset() {\n\n        if (buttonNameArray.length > 1) {\n\n            //create a copy\n            let newArray = [...buttonNameArray]\n\n            //remove the last thing from the copy\n            newArray.splice(1)\n\n            //update the global array with the copy\n            updateArray(newArray)\n\n            //test to make sure it fires\n            console.log(\"sliced and reset\")\n        }\n    }\n\n\n    return (<div>\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand onClick={() => {                          //resets when you click the germgang icon\n                    reset();\n                }}>GermGang</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link onClick={() => {                          //back button for nav bar with on click\n                            reset();\n                        }}>Reset</Nav.Link>\n                        <Nav.Link onClick={() => {                          //back button for nav bar with on click\n                            goBack();\n                        }}>Back</Nav.Link>\n                        <NavDropdown title=\"Go to\" id=\"collasible-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.2\">Aerobic Gram Positive Rods</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">Aerobic Gram Positive Cocci</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">Staphylococci ID</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">Alpha or Gamma-Hemolytic\n                                Streptococci</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">Beta-Hemolytic Streptococci</NavDropdown.Item>\n                            <NavDropdown.Divider/>\n                            <NavDropdown.Item href=\"#action/3.1\">Gram Negative Rods Non-Stool</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">Gram Negative Rods Stool Pathogens</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">Escherichia Coli</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">GNR Stool Pathogens Lactose Positive</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">GNR Stool Pathogens Lactose Negative</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.1\">Yersinia Pestis</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                    <Nav>\n                        <NavLink to=\"/login\" className=\"btn btn-secondary\">Sign in</NavLink>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    )\n\n\n    //use the getname function here to get a germ object.\n\n}\n\nexport default Header","/Users/natesmac/IdeaProjects/germgang/src/Components/PersonTracker.js",[],"/Users/natesmac/IdeaProjects/germgang/src/Components/Login.js",[],"/Users/natesmac/IdeaProjects/germgang/src/firebase.js",[],"/Users/natesmac/IdeaProjects/germgang/src/Components/ForgotPassword.js",[],"/Users/natesmac/IdeaProjects/germgang/src/Components/UpdateProfile.js",[],"/Users/natesmac/IdeaProjects/germgang/src/Components/QuestionPage.js",["109","110","111","112","113"],"/Users/natesmac/IdeaProjects/germgang/src/contexts/AuthContext.js",[],"/Users/natesmac/IdeaProjects/germgang/src/Components/firebaseUtils.js",["114"],"/Users/natesmac/IdeaProjects/germgang/src/Components/DeleteForm.js",["115"],"/Users/natesmac/IdeaProjects/germgang/src/Components/UpdateForm.js",["116","117"],"/Users/natesmac/IdeaProjects/germgang/src/Components/FormHelper.js",["118","119","120"],"import React, {useEffect} from 'react'\nimport {useState} from 'react'\nimport firebase from \"firebase\";\n\nconst FormHelper = ({ theHandler, placeholder, form,}) => {\n\n\n    const [input, inputChange] = useState(\"\");\n    const [inputArray, arrayChanges] = useState([])\n\n    function deleteArrayElement(nameer) {\n\n        let index = inputArray.indexOf(nameer)\n\n        let copyArray = inputArray.slice()\n\n        copyArray.splice(index, 1)\n\n        console.log(copyArray)\n\n\n        arrayChanges(copyArray)\n\n\n        form.setFieldValue(`nodeGerms.${index}.buttonList`, copyArray)\n\n\n    }\n\n    return (\n        <div className= \"form-group\">\n\n            <div className=\"input-group mb-3\">\n                <input placeholder={placeholder} type =  \"text\" value = {input} onChange={ e=> (inputChange(e.target.value))} className= \"form-control\" />\n                <div className=\"input-group-append\">\n                    <button type = \"button\" className= \"btnLight\" disabled = {input === undefined || input == null || input === \"\"} onClick={() => {arrayChanges(inputArray =>([...inputArray, input ]));theHandler(input)}}> Add Button Name </button>\n                </div>\n            </div>\n\n            <div className= \"row\">\n\n                <div className= \"col\">\n                    <ul className= \"list-group\">\n                        <div className= \"row\">\n\n                            {\n                                inputArray.map((buttonsName, index) => (\n                                        <div className = \"col \">\n                                            <li key = {index} className= \"list-group-item d-flex align-items-center\" style={{width: \"100px\"}}>\n\n                                                <span>{buttonsName}</span>\n                                                <button className=\"badge \" type = \"button\"\n                                                        onClick={() => {deleteArrayElement(buttonsName)}}> - </button>\n\n                                            </li>\n\n                                        </div>\n                                    )\n                                )\n                            }\n                        </div>\n                    </ul>\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst DropdownHelper = ({form, index})=> {\n\n    const [input, inputChange] = useState(null);\n\n\n    const [groupOfNodes, updateNodes] = useState([])\n\n    const [preview, updatePreview] = useState({buttonList: [\"The preview will show up here\"], name: '', image: ''})\n\n    //important! This gets the database reference and finds the list of objects. Then, it updates the state containing the list when it fires\n    async function fetcher() {\n\n        let temp = []\n\n        //reference to firebase\n        let panelbase = firebase.database().ref(\"germs\");\n\n        //gets the part that contains the key 'panels' then returns a snapshot\n        let snapshot = await panelbase.orderByChild(\"name\").once(\"value\");\n\n\n        if (snapshot.exists()) {\n\n\n            //object of objects here\n            let objectList = snapshot.val()\n\n\n            //keys of each\n            let keys = Object.keys(objectList)\n\n            //transforms the object into a list of objects\n            temp = keys.map(key => {\n\n                return objectList[key]\n            })\n\n            console.log(temp)\n\n            //updates the list of objects with the new one\n\n\n            await updateNodes([...groupOfNodes, ...temp])\n\n\n\n\n\n        } else {\n            console.log(\"No data available\");\n        }\n\n        //error block\n    }\n\n\n    useEffect(() => {\n        fetcher()\n    }, [])\n\n    const ShowPreviewHandler = (name, nodeArrays)=> {\n\n\n\n\n\n        for(let node in nodeArrays) {\n\n            if(nodeArrays[node].name === name) {\n                console.log(nodeArrays[node])\n                updatePreview(nodeArrays[node])\n                break;\n            }\n        }\n\n\n\n\n\n\n\n    }\n\n\n    useEffect(() => {\n        console.log(preview)\n    }, [preview])\n\n\n\n    return (\n        <div className= \"row\">\n            <div className= \"col\">\n                <div className= \"form-group\">\n                    <label htmlFor={`nodeGerms.${index}.buttonList`} className= \"col-form-label invisible\">Where do you want the button to go?</label>\n\n                    <div className= \"row align-items-center\">\n\n                        <div className= \"col\">\n\n                            <div>\n\n                                <input type =  \"text\"  onChange={ e=> {(inputChange(e.target.value)); form.setFieldValue('location', input); ShowPreviewHandler(input, groupOfNodes);  }} list = \"dropdown\" onKeyUp={e=>{(form.setFieldValue(\"location\", input)); ShowPreviewHandler(input, groupOfNodes);}} className= \"form-control\" placeholder='Button placement?' />\n                                <datalist id = \"dropdown\" >  <select>\n                                    {groupOfNodes.map((node, index) => (\n                                        <option key = {index} value={JSON.stringify(node).name} > {(node).name}</option>\n                                    ))}\n                                </select></datalist>\n\n\n                            </div>\n\n                        </div>\n\n\n\n\n\n                        <div className= \"col\">\n                            <div className= \"row\">\n                                <div className= \"col justify-content-center pt-4 pl-4\">\n                                    <span>{preview.buttonList!== undefined? preview.buttonList.join(): \"loading\"}</span>\n                                    <label htmlFor={`nodeGerms.${index}.buttonList`} className= \"col-sm-12 col-form-label invisible .d-none\">Buttons from selection</label>\n\n\n\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\n\nconst DropdownHelperForDelete = ({form, arrayUpdater })=> {\n\n    const [input, inputChange] = useState(null);\n\n\n    const [groupOfNodes, updateNodes] = useState([])\n\n    const [preview, updatePreview] = useState({buttonList: [\"\"], name: '', image: ''})\n\n    //important! This gets the database reference and finds the list of objects. Then, it updates the state containing the list when it fires\n    async function fetcher() {\n\n        let temp = []\n\n        //reference to firebase\n        let panelbase = firebase.database().ref(\"germs\");\n\n        //gets the part that contains the key 'panels' then returns a snapshot\n        let snapshot = await panelbase.orderByChild(\"name\").once(\"value\");\n\n\n        if (snapshot.exists()) {\n\n\n            //object of objects here\n            let objectList = snapshot.val()\n\n\n            //keys of each\n            let keys = Object.keys(objectList)\n\n            //transforms the object into a list of objects\n            temp = keys.map(key => {\n\n                return objectList[key]\n            })\n\n            console.log(temp)\n\n            //updates the list of objects with the new one\n\n\n            await updateNodes([...groupOfNodes, ...temp])\n\n\n\n        } else {\n            console.log(\"No data available\");\n        }\n\n        //error block\n    }\n\n\n    useEffect(() => {\n        fetcher()\n    }, [])\n\n    const ShowPreviewHandler = (name, nodeArrays)=> {\n\n\n        for(let node in nodeArrays) {\n\n            if(nodeArrays[node].name === name) {\n                console.log(nodeArrays[node])\n                let arrayPiece = (nodeArrays[node]).buttonList\n\n                arrayPiece !== undefined || false ? arrayUpdater([...arrayPiece])  : alert(\"no buttons here\")\n                break;\n            }\n        }\n\n\n    }\n\n\n    useEffect(() => {\n        console.log(preview)\n    }, [preview])\n\n\n\n    return (\n        <div className= \"row\">\n            <div className= \"col\">\n                <div className= \"form-group\">\n                    <label htmlFor={\"deletelabel\"} className= \"col-form-label invisible\">Where do you want to Delete?</label>\n\n                    <div className= \"row align-items-center\">\n\n                        <div className= \"col sm-12\">\n\n                            <div >\n\n                                <input type =  \"text\"  onChange={ e=> {(inputChange(e.target.value)); form.setFieldValue('location', input); ShowPreviewHandler(input, groupOfNodes);  }} list = \"dropdown\" onKeyUp={e=>{(form.setFieldValue(\"location\", input)); ShowPreviewHandler(input, groupOfNodes);}} className= \"form-control\" placeholder='Button placement?' />\n                                <datalist id = \"dropdown\" >  <select>\n                                    {groupOfNodes.map((node, index) => (\n                                        <option key = {index} value={JSON.stringify(node).name} > {(node).name}</option>\n                                    ))}\n                                </select></datalist>\n\n\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\n\nexport {FormHelper, DropdownHelper, DropdownHelperForDelete}","/Users/natesmac/IdeaProjects/germgang/src/Components/RoutingButtons.js",["121","122"],{"ruleId":"123","severity":1,"message":"124","line":4,"column":8,"nodeType":"125","messageId":"126","endLine":4,"endColumn":11},{"ruleId":"123","severity":1,"message":"127","line":7,"column":8,"nodeType":"125","messageId":"126","endLine":7,"endColumn":15},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"123","severity":1,"message":"132","line":9,"column":9,"nodeType":"125","messageId":"126","endLine":9,"endColumn":15},{"ruleId":"123","severity":1,"message":"133","line":1003,"column":14,"nodeType":"125","messageId":"126","endLine":1003,"endColumn":20},{"ruleId":"123","severity":1,"message":"134","line":8,"column":10,"nodeType":"125","messageId":"126","endLine":8,"endColumn":19},{"ruleId":"123","severity":1,"message":"135","line":17,"column":20,"nodeType":"125","messageId":"126","endLine":17,"endColumn":32},{"ruleId":"123","severity":1,"message":"136","line":1,"column":16,"nodeType":"125","messageId":"126","endLine":1,"endColumn":24},{"ruleId":"123","severity":1,"message":"134","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":19},{"ruleId":"123","severity":1,"message":"137","line":5,"column":9,"nodeType":"125","messageId":"126","endLine":5,"endColumn":15},{"ruleId":"123","severity":1,"message":"138","line":5,"column":17,"nodeType":"125","messageId":"126","endLine":5,"endColumn":22},{"ruleId":"123","severity":1,"message":"139","line":5,"column":24,"nodeType":"125","messageId":"126","endLine":5,"endColumn":34},{"ruleId":"123","severity":1,"message":"140","line":6,"column":27,"nodeType":"125","messageId":"126","endLine":6,"endColumn":33},{"ruleId":"123","severity":1,"message":"141","line":6,"column":35,"nodeType":"125","messageId":"126","endLine":6,"endColumn":41},{"ruleId":"123","severity":1,"message":"142","line":6,"column":43,"nodeType":"125","messageId":"126","endLine":6,"endColumn":48},{"ruleId":"123","severity":1,"message":"143","line":6,"column":50,"nodeType":"125","messageId":"126","endLine":6,"endColumn":54},{"ruleId":"123","severity":1,"message":"144","line":7,"column":8,"nodeType":"125","messageId":"126","endLine":7,"endColumn":13},{"ruleId":"123","severity":1,"message":"145","line":8,"column":9,"nodeType":"125","messageId":"126","endLine":8,"endColumn":16},{"ruleId":"123","severity":1,"message":"146","line":9,"column":8,"nodeType":"125","messageId":"126","endLine":9,"endColumn":21},{"ruleId":"123","severity":1,"message":"137","line":11,"column":8,"nodeType":"125","messageId":"126","endLine":11,"endColumn":14},{"ruleId":"123","severity":1,"message":"147","line":12,"column":9,"nodeType":"125","messageId":"126","endLine":12,"endColumn":14},{"ruleId":"123","severity":1,"message":"148","line":24,"column":29,"nodeType":"125","messageId":"126","endLine":24,"endColumn":40},{"ruleId":"149","severity":1,"message":"150","line":58,"column":67,"nodeType":"151","endLine":58,"endColumn":84,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":67,"column":13,"nodeType":"155","endLine":67,"endColumn":61},{"ruleId":"123","severity":1,"message":"156","line":1,"column":13,"nodeType":"125","messageId":"126","endLine":1,"endColumn":18},{"ruleId":"123","severity":1,"message":"157","line":2,"column":44,"nodeType":"125","messageId":"126","endLine":2,"endColumn":54},{"ruleId":"123","severity":1,"message":"157","line":2,"column":44,"nodeType":"125","messageId":"126","endLine":2,"endColumn":54},{"ruleId":"123","severity":1,"message":"145","line":6,"column":9,"nodeType":"125","messageId":"126","endLine":6,"endColumn":16},{"ruleId":"149","severity":1,"message":"158","line":128,"column":8,"nodeType":"151","endLine":128,"endColumn":10,"suggestions":"159"},{"ruleId":"123","severity":1,"message":"160","line":217,"column":21,"nodeType":"125","messageId":"126","endLine":217,"endColumn":34},{"ruleId":"149","severity":1,"message":"158","line":266,"column":8,"nodeType":"151","endLine":266,"endColumn":10,"suggestions":"161"},{"ruleId":"123","severity":1,"message":"162","line":8,"column":21,"nodeType":"125","messageId":"126","endLine":8,"endColumn":30},{"ruleId":"123","severity":1,"message":"136","line":8,"column":32,"nodeType":"125","messageId":"126","endLine":8,"endColumn":40},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'AddForm' is defined but never used.","no-native-reassign",["163"],"no-negated-in-lhs",["164"],"'Update' is defined but never used.","'pusher' is defined but never used.","'Container' is defined but never used.","'handleSubmit' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Alert' is defined but never used.","'Breadcrumb' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Login' is defined but never used.","'getName' is defined but never used.","'RoutingButton' is defined but never used.","'Image' is defined but never used.","'updateArray' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getImages' and 'images'. Either include them or remove the dependency array.","ArrayExpression",["165"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'React' is defined but never used.","'FieldArray' is defined but never used.","React Hook useEffect has a missing dependency: 'fetcher'. Either include it or remove the dependency array.",["166"],"'updatePreview' is assigned a value but never used.",["167"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"170","fix":"172"},"Update the dependencies array to be: [buttonNameArray, getImages, images]",{"range":"173","text":"174"},"Update the dependencies array to be: [fetcher]",{"range":"175","text":"176"},{"range":"177","text":"176"},[1702,1719],"[buttonNameArray, getImages, images]",[3637,3639],"[fetcher]",[7264,7266]]